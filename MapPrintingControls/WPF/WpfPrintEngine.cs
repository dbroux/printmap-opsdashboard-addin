using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Packaging;
using System.Linq;
using System.Printing;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Xps;
using System.Windows.Xps.Packaging;
using ESRI.ArcGIS.Client;

namespace MapPrintingControls.WPF
{
	internal class WpfPrintEngine
	{
		private readonly MapPrinter _mapPrinter;

		// Used during print
		IList<int> _pagesToPrint;
		int _currentPageIndex;
		private PrintTicket _printTicket;
		private PrintQueue _printQueue;

		private XpsDocument _xpsDocument;
		private VisualsToXpsDocument _vToXpsD;
		private MapLoader _mapLoader;

		public WpfPrintEngine(MapPrinter mapPrinter)
		{
			Debug.Assert(mapPrinter != null);
			_mapPrinter = mapPrinter;
		}

		public void Print(IList<int> pagesToPrint)
		{
			var dialog = new PrintDialog();
			if (dialog.ShowDialog() != true)
				return;

			BeginPrint();

			// Set the printable area size
			_mapPrinter.SetPrintableArea(dialog.PrintableAreaHeight, dialog.PrintableAreaWidth);

			// Initialize pages to print (can't be initialized before printable area since PageCount could change)
			_pagesToPrint = pagesToPrint;
			if (_pagesToPrint == null || _pagesToPrint.Count == 0)
				_pagesToPrint = Enumerable.Range(1, _mapPrinter.PageCount).ToList();

			// Create asynchronously the XpsDocument
			_printQueue = dialog.PrintQueue;
			_printTicket = dialog.PrintTicket;
			CreateXpsDocumentAsync();
		}

		// WPF version : when XpsDocument is created --> display print preview window
		void XpsDocumentCreatorCompleted()
		{
			Debug.WriteLine("EndBatchWrite");

			if (_vToXpsD != null)
				_vToXpsD.EndBatchWrite();
			Debug.WriteLine("Fin EndBatchWrite");

			if (_xpsDocument != null) // && !_mapPrinter.IsCancelingPrint)
			{
				FixedDocumentSequence fixedDocumentSequence = _xpsDocument.GetFixedDocumentSequence();
				_xpsDocument.Close();

				if (fixedDocumentSequence != null)
				{
					_mapPrinter.Status = MapPrinter.PreviewingStatus;

					var previewWindow = new PrintPreviewWindow
					{
						PrintQueue = _printQueue,
						PrintTicket = _printTicket,
						Document = fixedDocumentSequence
					};
					previewWindow.ShowDialog();
				}
			}

			EndPrint(null);
		}

		private void BeginPrint()
		{
			_mapPrinter.BeginPrint();

			_mapPrinter.PrintMap.Progress += PrintMapProgress;
			_mapLoader = new MapLoader(_mapPrinter.PrintMap);
			_mapLoader.Loaded += MapLoader_Loaded;
			_mapPrinter.PropertyChanged += MapPrinter_PropertyChanged;
		}

		void MapPrinter_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (e.PropertyName == "IsCancelingPrint" && _mapPrinter.IsCancelingPrint)
			{
				_mapLoader.CancelWait();
				XpsDocumentCreatorCompleted();
			}
		}


		private void EndPrint(Exception error)
		{
			_mapPrinter.EndPrint(error);
			_mapPrinter.PrintMap.Progress -= PrintMapProgress;
			_mapLoader.Loaded -= MapLoader_Loaded;
			_mapPrinter.PropertyChanged -= MapPrinter_PropertyChanged;
			_vToXpsD = null;
			_printTicket = null;
			_printQueue = null;
			_xpsDocument = null;
		}

		#region CreateXpsDocumentAsync
		/// <summary>
		/// Creates asynchronously the XPS document containing the pages to print.
		/// </summary>
		private void CreateXpsDocumentAsync()
		{
			// Create XPS document in memory
			Package pkg = Package.Open(new MemoryStream(), FileMode.Create, FileAccess.ReadWrite);
			const string pack = "pack://temp.xps";
			PackageStore.RemovePackage(new Uri(pack));
			PackageStore.AddPackage(new Uri(pack), pkg);
			_xpsDocument = new XpsDocument(pkg, CompressionOption.SuperFast, pack);

			// Create XpsDocument on disk
			//string tempFileName = System.IO.Path.GetRandomFileName() + ".xps";
			//File.Delete(tempFileName);
			//_xpsDocument = new XpsDocument(tempFileName, FileAccess.ReadWrite);

			_xpsDocument.CoreDocumentProperties.Description = "Generated by Print Map Dashboard AddIn";
			_xpsDocument.CoreDocumentProperties.Keywords = "ESRI ArcGIS WPF Runtime Mapping Dashboard AddIn";
			_xpsDocument.CoreDocumentProperties.Title = _mapPrinter.Title;

			// Print asynchronously page by page
			_currentPageIndex = -1;
			PrepareNextPage();
		}
		#endregion

		#region private void MapLoader_Loaded

		private async void MapLoader_Loaded(object sender, EventArgs e)
		{
			var mapLoader = sender as MapLoader;
			Debug.Assert(mapLoader == _mapLoader);
			if (mapLoader != _mapLoader) // event coming from a previous print (should not happen)
				return;

			Debug.WriteLine("_mapLoader_Loaded page=" + _mapPrinter.CurrentPage);
			OnPrintProgress(100);
			_mapPrinter.UpdateLayout(); // else latest tiles sometimes not displayed

			await Task.Delay(1000); // I don't understand the exact reason but without that delay the 'Writer' to XPSDocument gets sometimes stuck (while accessing to bitmap pixels). May be due to map animation?

			if (!_mapPrinter.IsPrinting || _mapPrinter.IsCancelingPrint) // meanwhile cancel can have been called
				return;

			// Add a page to the xps document
			if (_vToXpsD == null)
			{
				// Create XpsDocument writer
				XpsDocumentWriter writer = XpsDocument.CreateXpsDocumentWriter(_xpsDocument);
				writer.WritingPrintTicketRequired += (s, evt) => evt.CurrentPrintTicket = _printTicket;

				_vToXpsD = (VisualsToXpsDocument)writer.CreateVisualsCollator();
				if (_vToXpsD == null)
					throw new Exception("Null XpsDocument writer");
				_vToXpsD.BeginBatchWrite();
			}
			Debug.WriteLine("call write");
			_vToXpsD.Write(_mapPrinter);
			Debug.WriteLine("end write");
			// Prepare next page
			PrepareNextPage();
		}

		#endregion

		#region private void PrepareNextPage()
		private void PrepareNextPage()
		{
			_currentPageIndex++;
			while (_currentPageIndex < _pagesToPrint.Count)
			{
				var pageToPrint = _pagesToPrint[_currentPageIndex];
				if (pageToPrint > 0 && pageToPrint <= _mapPrinter.PageCount)
				{
					// Found a page to print ==> make it current and wait for the loading
					_mapLoader.WaitForLoaded();
					if (_mapPrinter.CurrentPage == pageToPrint)
						_mapPrinter.SetPrintMapExtent(_mapPrinter.CurrentPage); // could have been changed by user
					else
						_mapPrinter.CurrentPage = pageToPrint;
					OnPrintProgress(0);
					return;
				}
				_currentPageIndex++;
			}

			// No more page to print
			XpsDocumentCreatorCompleted();
		}

		#endregion


		private void PrintMapProgress(object sender, ProgressEventArgs e)
		{
			OnPrintProgress(e.Progress);
		}


		#region Event PrintProgress

		/// <summary>
		/// Occurs when the print is ongoing.
		/// </summary>
		public event EventHandler<PrintProgressEventArgs> PrintProgress;

		private void OnPrintProgress(int pageProgress)
		{
			if (_pagesToPrint == null)
				return;  // should not happen

			// Change the status
			if (!_mapPrinter.IsCancelingPrint)
				_mapPrinter.Status = string.Format(MapPrinter.PrintingStatus, _mapPrinter.CurrentPage, _mapPrinter.PageCount, pageProgress);

			// Raise PrintProgress event
			var handler = PrintProgress;
			if (handler != null)
			{
				double globalPrintProgress;
				if (_mapPrinter.IsCancelingPrint)
					globalPrintProgress = (double)_currentPageIndex / _pagesToPrint.Count + pageProgress / 100.0 * (1.0 - (double)_currentPageIndex / _pagesToPrint.Count);
				else
					globalPrintProgress = (_currentPageIndex + pageProgress / 100.0) / _pagesToPrint.Count;

				handler(this, new PrintProgressEventArgs(_currentPageIndex + 1, _pagesToPrint.Count, pageProgress, (int)(100 * globalPrintProgress)));
			}
		}

		#endregion

	}
}